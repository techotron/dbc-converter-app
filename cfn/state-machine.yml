AWSTemplateFormatVersion: "2010-09-09"

Description: State machine to process dbc files

Parameters:
  appPackageS3Bucket:
    Description: S3 Bucket for the packaged app
    Type: String

  appPackageS3Key:
    Description: S3 Key for the packaged app
    Type: String

Resources:
  ProcessEmailFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref appPackageS3Bucket
        S3Key: !Ref appPackageS3Key
      Description: Process E-mail
      FunctionName:  !Join [ "-", [ !Ref "AWS::StackName", "10-ProcessEmailFunction" ]]
      Handler: process-email.time
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 128
      Runtime: python3.7
      Timeout: 300
      Environment:
        Variables:
          SRCregion: !Ref "AWS::Region"

  LambdaExecutionRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: /
        Policies:
          - PolicyName: dbc-converter-log-policy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"
          - PolicyName: dbc-converter-resource-policy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                     - s3:*
                     - dynamodb:*
                     - sqs:*
                  Resource: "*"

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  StateMachinePermissionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        -
          PolicyName: states
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - "states:*"
                Resource:
                  - Ref: StateMachine

  StateMachine:
      Type: "AWS::StepFunctions::StateMachine"
      Properties:
        DefinitionString:
          !Sub
            - |-
              {
                "StartAt": "ProcessEmail",
                "States": {
                  "ProcessEmail": {
                    "Type": "Task",
                    "Resource": "${ProcessEmailFunction}",
                    "Comment": "process e-mail",
                    "Next": "Finished"
                  },
                  "Finished": {
                    "Type": "Pass",
                    "Result": "OK",
                    "End": true
                  }
                }
              }
            - {
                ProcessEmailFunction: !GetAtt ProcessEmailFunction.Arn
              }
        RoleArn: !GetAtt StatesExecutionRole.Arn

Outputs:
  ProcessEmailFunction:
    Description: ARN for process email lambda
    Value: !GetAtt ProcessEmailFunction.Arn
    Export:
      Name: "ProcessEmailFunction-ARN"
